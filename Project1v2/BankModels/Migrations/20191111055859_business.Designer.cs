// <auto-generated />
using System;
using BankModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BankModels.Migrations
{
    [DbContext(typeof(BankDbContext))]
    [Migration("20191111055859_business")]
    partial class business
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BankModels.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("BankModels.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankModels.BusinessAccount", b =>
                {
                    b.HasBaseType("BankModels.Account");

                    b.Property<double>("Overdraft")
                        .HasColumnType("float");

                    b.Property<double>("OverdraftCost")
                        .HasColumnType("float");

                    b.Property<double>("OverdraftDueDate")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("BusinessAccount");
                });

            modelBuilder.Entity("BankModels.LoanAccount", b =>
                {
                    b.HasBaseType("BankModels.Account");

                    b.Property<double>("MonthlyDue")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("LoanAccount");
                });

            modelBuilder.Entity("BankModels.TermDepositAccount", b =>
                {
                    b.HasBaseType("BankModels.Account");

                    b.Property<DateTime>("Maturity")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("TermDepositAccount");
                });

            modelBuilder.Entity("BankModels.Account", b =>
                {
                    b.HasOne("BankModels.Transaction", null)
                        .WithMany("AcountIds")
                        .HasForeignKey("TransactionId");
                });
#pragma warning restore 612, 618
        }
    }
}
